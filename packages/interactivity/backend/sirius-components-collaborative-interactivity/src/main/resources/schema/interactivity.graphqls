extend type Query {
    interactivity(input: InteractivityModelInput!): InteractivityModelPayload!
    affectedElements(input: ComputeAffectedNodesInput!): ComputeAffectedElementsPayload!
    dynamicFilter(input: ComputeDynamicFilterInput!): ComputeDynamicFilterPayload!
    semanticSearch(input: SemanticSearchInput!): SemanticSearchPayload!
}

input InteractivityModelInput {
    id: ID!
    editingContextId: ID!
    representationId: ID!
}

input ComputeAffectedNodesInput {
    id: ID!
    editingContextId: ID!
    representationId: ID!
    containerIds: [String!]!
}

input ComputeDynamicFilterInput {
    id: ID!
    editingContextId: ID!
    representationId: ID!
    filterId: String!
    focusedElementId: String!
}

input SemanticSearchInput {
    id: ID!
    editingContextId: ID!
    representationId: ID!
    input: String!
}

union SemanticZoomPayload = SuccessPayload | ErrorPayload
union InteractivityModelPayload = InteractivityModelSuccessPayload | SuccessPayload | ErrorPayload
union ComputeAffectedElementsPayload = ComputeAffectedElementsSuccessPayload | SuccessPayload | ErrorPayload
union ComputeDynamicFilterPayload = ComputeDynamicFilterSuccessPayload | ErrorPayload
union SemanticSearchPayload = SemanticSearchSuccessPayload | ErrorPayload

type InteractivityModelSuccessPayload {
    id: ID!
    interactivity: Interactivity!
}

type SemanticSearchSuccessPayload {
    id: ID!
    semanticElementIds: [String!]!
}

type ComputeDynamicFilterSuccessPayload {
    id: ID!
    elementIds: [SemanticElementModifier!]!
    edges: [String!]!
}

type SemanticElementModifier {
    semanticElementId: String!
    modifierId: String!
}

type ComputeAffectedElementsSuccessPayload {
    id: ID!
    affectedElementIds: [AffectedElementIdsPair!]!
}

type AffectedElementIdsPair {
    id: String!
    affectedElementIds: [String!]!
}

type Interactivity {
    domainId: String!
    diagramDefinition: DiagramDescription!
    features: [InteractiveFeature!]!
    filters: [FilterDefinition!]!
}

interface Identifiable {
    id: String!
}

union ElementReference = Path

type Path {
    path: String!
}


union InteractiveFeature = SemanticZoom | DynamicFilter | SemanticSearch

type SemanticZoom {
    levels: [ZoomLevel!]!
}

type ZoomLevel {
    id: String!
    min: Int!
    max: Int!
    filter: FilterDefinition
}

type FilterDefinition {
    name: String!
    modifiers: [ScopedModifier!]!
}

interface Modifier implements Identifiable {
    id: String!
}

interface ScopedModifier implements Modifier & Identifiable {
    elements: ElementReference!
    id: String!
}

type VisibilityModifier implements ScopedModifier & Modifier & Identifiable {
    elements: ElementReference!
    hide: Boolean!
    id: String!
}

type StyleModifier implements ScopedModifier & Modifier & Identifiable {
    elements: ElementReference!
    style: NodeStyleDescription!
    id: String!
}

type DefaultModifier implements Modifier & Identifiable {
    hide: Boolean!
    style: NodeStyleDescription
    id: String!
}

type UserColor {
    name: String!
    value: String!
}

union NodeStyleDescription = RectangularNodeStyleDescription | ImageNodeStyleDescription | IconLabelNodeStyleDescription

type RectangularNodeStyleDescription {
    borderColor: UserColor!
    borderRadius: Int!
    borderSize: Int!
    borderLineStyle: IntLineStyle!
    background: UserColor!
}

type ImageNodeStyleDescription {
    borderColor: UserColor!
    borderRadius: Int!
    borderSize: Int!
    borderLineStyle: IntLineStyle!
    shape: String!
    positionDependentRotation: Boolean!
}

enum IntLineStyle {
    DASH
    DASH_DOT
    DOT
    SOLID
}

type IconLabelNodeStyleDescription {
    borderColor: UserColor!
    borderRadius: Int!
    borderSize: Int!
    borderLineStyle: IntLineStyle!
    background: UserColor!
}


type DynamicFilter {
    filters: [Filter!]!
}

type Filter implements Identifiable {
    reference: FilterDefinition
    name: String!
    focus: String!
    id: String!
    radius: Radius
    defaultModifier: DefaultModifier!
}

union Radius = FixedRadius | BoundedRadius

type FixedRadius {
    value: Int!
}

type BoundedRadius {
    min: Int!
    max: Int!
}

type SemanticSearch implements Identifiable {
    search: [ElementReference!]!
    id: String!
}